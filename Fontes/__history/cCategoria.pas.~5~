unit cCategoria;

interface

uses FireDAC.comp.Client, FireDAC.DApt, System.SysUtils, FMX.Graphics;

type
    TCategoria = class
    private
        Fconn: TFDConnection;
        FID_CATEGORIA: Integer;
        FDESCRICAO: string;
        FICONE: TBitmap;
    function Excluir(out erro: string): Boolean;
    public
        constructor Create(conn: TFDConnection);
        property ID_CATEGORIA: Integer read FID_CATEGORIA write FID_CATEGORIA;
        property DESCRICAO: string read FDESCRICAO write FDESCRICAO;
        property ICONE: TBitmap read FICONE write FICONE;

        function ListarCategoria(out erro: string): TFDQuery;
        function Inserir(out erro: string): Boolean;
        function Alterar(out erro: string): Boolean;
end;

implementation

{ TCategoria }

constructor TCategoria.Create(conn: TFDConnection);
begin
    Fconn := conn;
end;

function TCategoria.Inserir(out erro: string): Boolean;
var
    qry : TFDQuery;
begin
    // Validações....
    if DESCRICAO = '' then
    begin
        erro := 'Informa a descrição da categoria';
        Result := false;
        Exit;
    end;

    try
        try
            qry := TFDQuery.Create(nil);
            qry.Connection := Fconn;

            with qry do
            begin
                Active := false;
                SQL.Clear;
                SQL.Add('INSERT INTO TAB_CATEGORIA(DESCRICAO, ICONE');
                SQL.Add('VALUES(:DESCRICAO, :ICONE)');
                ParamByName('DESCRICAO').Value := DESCRICAO;
                ParamByName('ICONE').Assign(ICONE);
                ExecSQL;
            end;

            Result := true;
            erro := '';

        except on ex:Exception do
        begin
            Result := false;
            erro := 'Erro ao inserir categoria: ' + ex.Message;
        end;
        end;
    finally
        qry.DisposeOf;
    end;
end;

function TCategoria.Alterar(out erro: string): Boolean;
var
    qry : TFDQuery;
begin
    // Validações....
    if ID_CATEGORIA = '' then
    begin
        erro := 'Informa o id da categoria';
        Result := false;
        Exit;
    end;
    
    if DESCRICAO = '' then
    begin
        erro := 'Informa a descrição da categoria';
        Result := false;
        Exit;
    end;

    try
        try
            qry := TFDQuery.Create(nil);
            qry.Connection := Fconn;

            with qry do
            begin
                Active := false;
                SQL.Clear;
                SQL.Add('UPDATE TAB_CATEGORIA SET DESCRICAO = :DESCRICA0, ICONE = :ICONE');
                SQL.Add('WHERE ID_CATEGORIA = :ID_CATEGORIA');
                ParamByName('DESCRICAO').Value := DESCRICAO;
                ParamByName('ICONE').Assign(ICONE);
                ParamByName('ID_CATEGORIA').Value := ID_CATEGORIA;
                ExecSQL;
            end;

            Result := true;
            erro := '';

        except on ex:Exception do
        begin
            Result := false;
            erro := 'Erro ao alterar categoria: ' + ex.Message;
        end;
        end;
    finally
        qry.DisposeOf;
    end;
end;

function TCategoria.Excluir(out erro: string): Boolean;
var
    qry : TFDQuery;
begin
    // Validações....
    if ID_CATEGORIA = '' then
    begin
        erro := 'Informa o id da categoria';
        Result := false;
        Exit;
    end;

    try
        try
            qry := TFDQuery.Create(nil);
            qry.Connection := Fconn;

            with qry do
            begin
                Active := false;
                SQL.Clear;
                SQL.Add('DELETE FROM TAB_CATEGORIA');
                SQL.Add('WHERE ID_CATEGORIA = :ID_CATEGORIA');
                ParamByName('ID_CATEGORIA').Value := ID_CATEGORIA;
                ExecSQL;
            end;

            Result := true;
            erro := '';

        except on ex:Exception do
        begin
            Result := false;
            erro := 'Erro ao alterar categoria: ' + ex.Message;
        end;
        end;
    finally
        qry.DisposeOf;
    end;
end;

function TCategoria.ListarCategoria(out erro: string): TFDQuery;
var
    qry : TFDQuery;
begin
    try
      qry := TFDQuery.Create(nil);
      qry.Connection := Fconn;

      with qry do
      begin
        Active := false;
        SQL.Clear;
        SQL.Add('SELECT * FROM TB_CATEGORIA');
        SQL.Add('WHERE 1 = 1');

        if ID_CATEGORIA > 0 then
        begin
            SQL.Add('AND ID_CATEGORIA = :ID_CATEGORIA');
            ParamByName('ID_CATEGORIA').Value := ID_CATEGORIA;
        end;

        Active := true;
      end;

      Result := qry;
      erro := '';
      
    except on ex:Exception do
    begin
      Result := nil;
      erro := 'Erro ao consultar categorias: ' + ex.Message;
    end;
    end;
end;

end.
