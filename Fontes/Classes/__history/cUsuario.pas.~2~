unit cUsuario;

interface

uses FireDAC.comp.Client, FireDAC.DApt, System.SysUtils, FMX.Graphics;

type
    TCategoria = class
    private
        Fconn: TFDConnection;
        FIND_LOGIN: string;
        FEMAIL: string;
        FSENHA: string;
        FNOME: string;
        FID_USUARIO: Integer;

    public
        constructor Create(conn: TFDConnection);
        property ID_USUARIO: Integer read FID_USUARIO write FID_USUARIO;
        property NOME: string read FNOME write FNOME;
        property EMAIL: string read FEMAIL write FEMAIL;
        property SENHA: string read FSENHA write FSENHA;
        property IND_LOGIN: string read FIND_LOGIN write FIND_LOGIN;

        function ListarUsuario(out erro: string): TFDQuery;
        function Inserir(out erro: string): Boolean;
        function Alterar(out erro: string): Boolean;
        function Excluir(out erro: string): Boolean;
end;

implementation

{ TCategoria }

constructor TCategoria.Create(conn: TFDConnection);
begin
    Fconn := conn;
end;

function TCategoria.Inserir(out erro: string): Boolean;
var
    qry : TFDQuery;
begin
    // Validações....
    if NOME = '' then
    begin
        erro := 'Informa o nome do usuário';
        Result := false;
        Exit;
    end;

    if EMAIL = '' then
    begin
        erro := 'Informa o email do usuário';
        Result := false;
        Exit;
    end;

    if SENHA = '' then
    begin
        erro := 'Informa a senha do usuário';
        Result := false;
        Exit;
    end;

    try
        try
            qry := TFDQuery.Create(nil);
            qry.Connection := Fconn;

            with qry do
            begin
                Active := false;
                SQL.Clear;
                SQL.Add('INSERT INTO TAB_USUARIO(NOME, EMAIL, SENHA, IND_LOGIN)');
                SQL.Add('VALUES(:NOME, :EMAIL, :SENHA, :IND_LOGIN)');
                ParamByName('NOME').Value := NOME;
                ParamByName('EMAIL').Value := EMAIL;
                ParamByName('SENHA').Value := SENHA;
                ParamByName('IND_LOGIN').Value := IND_LOGIN;
                ExecSQL;
            end;

            Result := true;
            erro := '';

        except on ex:Exception do
        begin
            Result := false;
            erro := 'Erro ao inserir usuário: ' + ex.Message;
        end;
        end;
    finally
        qry.DisposeOf;
    end;
end;

function TCategoria.Alterar(out erro: string): Boolean;
var
    qry : TFDQuery;
begin
    // Validações....
    if ID_USUARIO <= 0 then
    begin
        erro := 'Informa o ID do usuário';
        Result := false;
        Exit;
    end;

    if NOME = '' then
    begin
        erro := 'Informa o nome do usuário';
        Result := false;
        Exit;
    end;

    if EMAIL = '' then
    begin
        erro := 'Informa o email do usuário';
        Result := false;
        Exit;
    end;

    if SENHA = '' then
    begin
        erro := 'Informa a senha do usuário';
        Result := false;
        Exit;
    end;

    try
        try
            qry := TFDQuery.Create(nil);
            qry.Connection := Fconn;

            with qry do
            begin
                Active := false;
                SQL.Clear;
                SQL.Add('UPDATE TAB_USUARIO SET NOME = :NOME, EMAIL = :EMAIL, SENHA = :SENHA, IND_LOGIN = :IND_LOGIN');
                SQL.Add('WHERE ID_USUARIO = :ID_USUARIO');
                ParamByName('ID_USUARIO').Value := ID_USUARIO;
                ParamByName('NOME').Value := NOME;
                ParamByName('EMAIL').Value := EMAIL;
                ParamByName('SENHA').Value := SENHA;
                ParamByName('IND_LOGIN').Value := IND_LOGIN;
                ExecSQL;
            end;

            Result := true;
            erro := '';

        except on ex:Exception do
        begin
            Result := false;
            erro := 'Erro ao alterar usuário: ' + ex.Message;
        end;
        end;
    finally
        qry.DisposeOf;
    end;
end;

function TCategoria.Excluir(out erro: string): Boolean;
var
    qry : TFDQuery;
begiN
    try
        try
            qry := TFDQuery.Create(nil);
            qry.Connection := Fconn;

            with qry do
            begin
                Active := false;
                SQL.Clear;
                SQL.Add('DELETE FROM TAB_USUARIO');

                if ID_USUARIO > 0 then
                begin
                    SQL.Add('WHERE ID_USUARIO = :ID_USUARIO');
                    ParamByName('ID_USUARIO').Value := ID_USUARIO;
                end;

                ExecSQL;
            end;

            Result := true;
            erro := '';

        except on ex:Exception do
        begin
            Result := false;
            erro := 'Erro ao excluir usuário: ' + ex.Message;
        end;
        end;
    finally
        qry.DisposeOf;
    end;
end;

function TCategoria.ListarCategoria(out erro: string): TFDQuery;
var
    qry : TFDQuery;
begin
    try
      qry := TFDQuery.Create(nil);
      qry.Connection := Fconn;

      with qry do
      begin
        Active := false;
        SQL.Clear;
        SQL.Add('SELECT * FROM TAB_CATEGORIA');
        SQL.Add('WHERE 1 = 1');

        if ID_CATEGORIA > 0 then
        begin
            SQL.Add('AND ID_CATEGORIA = :ID_CATEGORIA');
            ParamByName('ID_CATEGORIA').Value := ID_CATEGORIA;
        end;

        SQL.Add('ORDER BY DESCRICAO');

        Active := true;
      end;

      Result := qry;
      erro := '';

    except on ex:Exception do
    begin
      Result := nil;
      erro := 'Erro ao consultar categorias: ' + ex.Message;
    end;
    end;
end;

end.
